machine = {
    332: "I386",
    354: "R3000",
    358: "R4000",
    360: "R10000",
    361: "WCEMIPSV2",
    388: "ALPHA",
    496: "POWERPC",
    418: "SH3",
    420: "SH3E",
    422: "SH4",
    448: "ARM",
    450: "THUMB",
    512: "IA64",
    614: "MIPS16",
    870: "MIPSFPU",
    1126: "MIPSFPU16",
    644: "ALPHA64"
}

system = {
    1: "NATIVE",
    2: "WINDOWS_GUI",
    3: "WINDOWS_CUI",
    5: "OS2_CUI",
    7: "POSIX_CUI",
    8: "NATIVE_WINDOWS",
    9: "WINDOWS_CE_GUI",
}

magic = {
    267: "PE32",
    523: "PE32_PLUS",
}


def coff_h(header):
    coff = {}
    coff["timestamp"] = header.TimeDateStamp
    coff["machine"] = machine.get(header.Machine, "Unknown")
    characteristics = []
    if header.IMAGE_FILE_16BIT_MACHINE:
        characteristics.append("CHARA_16BIT_MACHINE")
    if header.IMAGE_FILE_32BIT_MACHINE:
        characteristics.append("CHARA_32BIT_MACHINE")
    if header.IMAGE_FILE_AGGRESIVE_WS_TRIM:
        characteristics.append("AGGRESIVE_WS_TRIM")
    if header.IMAGE_FILE_BYTES_REVERSED_HI:
        characteristics.append("BYTES_REVERSED_HI")
    if header.IMAGE_FILE_BYTES_REVERSED_LO:
        characteristics.append("BYTES_REVERSED_LO")
    if header.IMAGE_FILE_DEBUG_STRIPPED:
        characteristics.append("DEBUG_STRIPPED")
    if header.IMAGE_FILE_DLL:
        characteristics.append("DLL")
    if header.IMAGE_FILE_EXECUTABLE_IMAGE:
        characteristics.append("EXECUTABLE_IMAGE")
    if header.IMAGE_FILE_LARGE_ADDRESS_AWARE:
        characteristics.append("LARGE_ADDRESS_AWARE")
    if header.IMAGE_FILE_LINE_NUMS_STRIPPED:
        characteristics.append("LINE_NUMS_STRIPPED")
    if header.IMAGE_FILE_LOCAL_SYMS_STRIPPED:
        characteristics.append("LOCAL_SYMS_STRIPPED")
    if header.IMAGE_FILE_NET_RUN_FROM_SWAP:
        characteristics.append("NET_RUN_FROM_SWAP")
    if header.IMAGE_FILE_RELOCS_STRIPPED:
        characteristics.append("RELOCS_STRIPPED")
    if header.IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP:
        characteristics.append("REMOVABLE_RUN_FROM_SWAP")
    if header.IMAGE_FILE_SYSTEM:
        characteristics.append("SYSTEM")
    if header.IMAGE_FILE_UP_SYSTEM_ONLY:
        characteristics.append("UP_SYSTEM_ONLY")

    coff["characteristics"] = characteristics
    return coff


def optional_h(header):
    optional = {}
    optional["subsystem"] = system.get(header.Subsystem, "Unknown")

    optional["magic"] = magic.get(header.Magic, "Unknown")

    optional["major_image_version"] = header.MajorImageVersion
    optional["minor_image_version"] = header.MinorImageVersion
    optional["major_linker_version"] = header.MajorLinkerVersion
    optional["minor_linker_version"] = header.MinorLinkerVersion
    optional["major_operating_system_version"] = header.MajorOperatingSystemVersion
    optional["minor_operating_system_version"] = header.MinorOperatingSystemVersion
    optional["major_subsystem_version"] = header.MajorSubsystemVersion
    optional["minor_subsystem_version"] = header.MinorSubsystemVersion
    optional["sizeof_code"] = header.SizeOfCode
    optional["sizeof_headers"] = header.SizeOfHeaders
    optional["sizeof_heap_commit"] = header.SizeOfHeapCommit

    dll_characteristics = []
    if header.IMAGE_DLLCHARACTERISTICS_APPCONTAINER:
        dll_characteristics.append("APPCONTAINER")
    if header.IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE:
        dll_characteristics.append("DYNAMIC_BASE")
    if header.IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY:
        dll_characteristics.append("FORCE_INTEGRITY")
    if header.IMAGE_DLLCHARACTERISTICS_GUARD_CF:
        dll_characteristics.append("GUARD_CF")
    if header.IMAGE_DLLCHARACTERISTICS_HIGH_ENTROPY_VA:
        dll_characteristics.append("HIGH_ENTROPY_VA")
    if header.IMAGE_DLLCHARACTERISTICS_NO_BIND:
        dll_characteristics.append("NO_BIND")
    if header.IMAGE_DLLCHARACTERISTICS_NO_ISOLATION:
        dll_characteristics.append("NO_ISOLATION")
    if header.IMAGE_DLLCHARACTERISTICS_NO_SEH:
        dll_characteristics.append("NO_SEH")
    if header.IMAGE_DLLCHARACTERISTICS_NX_COMPAT:
        dll_characteristics.append("NX_COMPAT")
    if header.IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE:
        dll_characteristics.append("TERMINAL_SERVER_AWARE")
    if header.IMAGE_DLLCHARACTERISTICS_WDM_DRIVER:
        dll_characteristics.append("WDM_DRIVER")
    optional["dll_characteristics"] = dll_characteristics

    return optional


def handle_imports(header):
    imports = {}
    for importeddll in header:
        imports[bytes.decode(importeddll.dll)] = []
        for importedapi in importeddll.imports:
            if importedapi.name is not None:
                imports[bytes.decode(importeddll.dll)].append(
                    bytes.decode(importedapi.name))
    return imports


def handle_sections(secs):
    section = {}
    sections = []
    for sec in secs:
        item = {}
        item["name"] = bytes.decode(sec.Name).strip('\x00')
        item["size"] = sec.SizeOfRawData
        item["vsize"] = sec.Misc_VirtualSize
        sections.append(item)
        section["sections"] = sections
    return section


def handleEXE(pe):
    data_source = {}
    header = {}
    # optional header
    optional = optional_h(pe.OPTIONAL_HEADER)
    header["optional"] = optional

    # coff header
    coff = coff_h(pe.FILE_HEADER)
    header["coff"] = coff
    data_source["header"] = header

    # imports
    imports = handle_imports(pe.DIRECTORY_ENTRY_IMPORT)
    data_source["imports"] = imports

    # sections
    section = handle_sections(pe.sections)
    data_source["section"] = section

    # print(data_source)
    return data_source
