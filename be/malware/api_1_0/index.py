import json
from sklearn import model_selection
from flask import current_app, request, jsonify, make_response, session
import hashlib
import os
from werkzeug.utils import secure_filename
import numpy as np
import pandas as pd
from malware.models import User, File
from malware import db
from flask_wtf import csrf
from . import api
from . import pefile
from . import utils


Alist = []

Alist_cs = []
f = pd.read_json('2000.json')
f = f[f['label'] != -1]
Adict = {}
for pe in f["imports"]:
    for key, values in pe.items():

        for value in values:
            if(value not in Adict):
                if "@"in value:
                    continue
                if "ord" in value.lower():
                    continue
                Adict[value] = len(Adict)
Alists = []


for pe in f["imports"]:
    Alist = [0] * len(Adict)
    for key, values in pe.items():
        for value in values:
            if "@"in value or "ord" in value.lower():
                continue

            ind = Adict[value]
            Alist[ind] = 1
    Alists.append(Alist)
X = np.array(Alists)
y = np.array(f.label)
X_train, X_test, y_train, y_test = model_selection.train_test_split(
    X, y, test_size=0.3, random_state=1)


# 判断文件夹是否存在，如果不存在则创建
if not os.path.exists('upload'):
    os.makedirs('upload')
else:
    pass


@api.route('/csrf')
def csrfToken():
    csrf_token = csrf.generate_csrf()  # 创建csrf_token 值
    resp = make_response()
    resp.set_cookie("csrf_token", csrf_token)  # 设置 cookie 值
    return resp


def decisionTree(file_data):
    filename = 'file_data.json'
    with open(filename, 'w') as f_obj:
        json.dump(file_data, f_obj)
    cs = pd.read_json('file_data.json')

    Adict_cs = {}
    for pe in cs["imports"]:
        for key, values in pe.items():
            for value in values:
                if(value not in Adict_cs):
                    if "@"in value:
                        continue
                    if "ord" in value.lower():
                        continue
                    Adict_cs[value] = len(Adict_cs)
    Alists_cs = []

    for pe in cs["imports"]:
        Alist_cs = [0] * len(Adict)
        # Alist_cs = [0] * 10486
        for key, values in pe.items():
            for value in values:
                if "@"in value or "ord" in value.lower():
                    continue

                ind = Adict_cs[value]
                Alist_cs[ind] = 1
        Alists_cs.append(Alist_cs)

    X_cs = np.array(Alists_cs)
    from sklearn.tree import DecisionTreeClassifier
    model = DecisionTreeClassifier(min_samples_leaf=10, random_state=1)
    model.fit(X_train, y_train)

    pred = model.predict(X_cs)
    return pred[0]


@api.route('/upload', methods=["POST"])
def upload():
    data = request.files.get("file")
    # basepath = os.path.dirname(__file__)  # 当前文件所在路径
    # 注意：没有的文件夹一定要先创建，不然会提示没有该路径
    filename = data.filename
    path = os.path.join('upload', secure_filename(filename))
    data.save(path)

    pe = pefile.PE(path)

    data_source = utils.handleEXE(pe)

    hash_md5 = hashlib.md5()
    with open(path, mode='rb') as f:
        for line in f:
            hash_md5.update(line)
    md5 = hash_md5.hexdigest()

    data_source["md5"] = md5

    email = session.get("email")  # 获取当前用户
    print(email)
    f = File.query.filter_by(md5=md5).first()

    # DB 中没有这个文件
    if f is None:
        result = decisionTree([data_source])
        status = "safe"
        if result == 0:
            status = "unsafe"

        # 未登陆
        if email is None:
            f = File(md5=md5, status=status, user="UnKnown", filename=filename)
            db.session.add(f)
            db.session.commit()

        else:
            f = File(md5=md5, status=status, user=email, filename=filename)
            db.session.add(f)
            db.session.commit()
            user = User.query.filter_by(email=email).first()
            user.files.append(f)
            db.session.commit()

        # 检测完删除 upload 中的 exe 文件
        if os.path.exists(path):
            os.remove(path)
        return jsonify({"md5": md5})

    # DB 中有这个文件
    else:
        if email is not None:
            user = User.query.filter_by(email=email).first()

            user.files.append(f)
            db.session.commit()

         # 检测完删除 upload 中的 exe 文件
        if os.path.exists(path):
            os.remove(path)

        return jsonify({"md5": md5})


@api.route('/searchfile/<md5>', methods=["GET"])
def searchfile(md5):
    f = File.query.filter_by(md5=md5).first()
    return jsonify({"md5": md5, "status": f.status, "filename": f.filename})

# search.vue
@api.route('/searchall', methods=["GET"])
def searchall():
    f = File.query.filter_by().all()
    files = []
    for a in f:
        files.append({
            "filename": a.filename,
            "status": a.status,
            "time": a.create_time,
            "user": a.user
        })
    print(f)
    return jsonify({"result": files})
