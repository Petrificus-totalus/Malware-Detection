
from flask import current_app, request, jsonify, make_response, session
import hashlib
import os
from werkzeug.utils import secure_filename
from malware.models import User, File
from malware import db
from flask_wtf import csrf
from . import api
from . import pefile

# from malware import db, models

# 判断文件夹是否存在，如果不存在则创建
if not os.path.exists('upload'):
    os.makedirs('upload')
else:
    pass


@api.route('/csrf')
def csrfToken():
    csrf_token = csrf.generate_csrf()  # 创建csrf_token 值
    resp = make_response()
    resp.set_cookie("csrf_token", csrf_token)  # 设置 cookie 值
    return resp


@api.route('/upload', methods=["POST"])
def upload():
    data = request.files.get("file")
    # basepath = os.path.dirname(__file__)  # 当前文件所在路径
    # 注意：没有的文件夹一定要先创建，不然会提示没有该路径
    path = os.path.join('upload', secure_filename(data.filename))
    # print(path)
    data.save(path)

    pe = pefile.PE(path)
    # for section in pe.sections:
    #     print(section)
    # print(pe)
    print(pe.OPTIONAL_HEADER.DATA_DIRECTORY[6].Size)

    hash_md5 = hashlib.md5()
    hash_sha256 = hashlib.sha256()

    while True:
        byte = data.read(4096)
        if not byte:
            break
        hash_md5.update(byte)
        hash_sha256.update(byte)

    username = session.get("username")
    f = File.query.filter_by(sha256=hash_sha256.hexdigest()).first()
    if f is not None:
        return "already exist"
    if username is not None:
        user = User.query.filter_by(username=username).first()

        file = File(sha256=hash_sha256.hexdigest(),
                    md5=hash_md5.hexdigest(), status="safe")
        file.users = [user]
        db.session.add(file)
        db.session.commit()

    else:
        file = File(sha256=hash_sha256.hexdigest(),
                    md5=hash_md5.hexdigest(), status="safe")
        db.session.add(file)
        db.session.commit()
    print(username)

    return hash_sha256.hexdigest()
