# 注册登陆

from . import api
from malware import db
from malware.models import User
from flask import request, jsonify, current_app, session
from sqlalchemy.exc import IntegrityError
from werkzeug.security import generate_password_hash, check_password_hash
import random

import smtplib
from email.mime.text import MIMEText


def generate(check_num=6):
    temp = ''
    for i in range(check_num):          # check_num为需要循环的次数，也就是需要生成验证码的个数，默认为4
        choice = random.randint(1,  3)    # 生成1到3的随机数
        if choice == 1:                  # 如果choice为1，则随机验证码的值为数字
            temp += random.choice('0123456789')
        elif choice == 2:                # 如果choice为2，则随机验证码的值为大写字母
            num = random.randint(65,  90)
            temp += chr(num)
        elif choice == 3:                # 如果choice为3，则随机验证码的值为小写字母
            num = random.randint(97,  122)
            temp += chr(num)
    return temp


@api.route('/email/<loginORregister>', methods=["POST"])
def sendEmail(loginORregister):
    msg_to = request.form.get("email")  # 收件人邮箱
    # print(msg_to)

    user = User.query.filter_by(email=msg_to).first()

    if loginORregister == "register":
        if user is not None:  # 注册时发现邮箱已经注册
            return jsonify({"status": "EXIST"})
    else:
        if user is None:  # 登陆时发现邮箱没注册
            return jsonify({"status": "NOTEXIST"})

    msg_from = '1966710331@qq.com'  # 发送方邮箱
    passwd = 'rcegkuaxsankccch'  # 填入发送方邮箱的授权码

    subject = "恶意软件检测平台验证码"  # 主题
    content = generate()  # 随机六位验证码
    msg = MIMEText(content)
    msg['Subject'] = subject
    msg['From'] = msg_from
    msg['To'] = msg_to
    try:
        s = smtplib.SMTP_SSL("smtp.qq.com", 465)
        s.login(msg_from, passwd)
        s.sendmail(msg_from, msg_to, msg.as_string())

        return jsonify({
            "status": "OK",
            "data":  content
        })
    except s.SMTPException:
        return jsonify({
            "status": "ERROR",
        })
    finally:
        s.quit()


@api.route('/user/register', methods=["POST"])
def register():
    username = request.form.get("username")
    password = request.form.get("password")
    email = request.form.get("email")

    user = User(username=username, email=email)
    user.pwd = password
    try:
        db.session.add(user)
        db.session.commit()
    except IntegrityError as e:
        db.session.rollback()
        current_app.logger.error(e)
        return jsonify({
            "code": 0,
        })
    except Exception as e:
        db.session.rollback()
        current_app.logger.error(e)
        return jsonify({
            "code": 0,
        })

    # 保存登陆状态到session
    session["email"] = email

    return jsonify({
        "code": 1,
        "data": username, "email": user.email
    })


@api.route('/user/login/<cORp>', methods=["POST"])
def login(cORp):
    email = request.form.get("email")
    user = User.query.filter_by(email=email).first()

    if cORp == "true":
        if user is not None:
            return jsonify({"code": 1, "data": user.username})
        else:
            return jsonify({"code": 0})

    else:
        password = request.form.get("password")
        if user is None:
            return jsonify({"code": 0, "data": "该邮箱未注册，请注册"})
        if not user.check_password(password):
            return jsonify({"code": 0, "data": "密码错误"})
        session["email"] = user.email
        return jsonify({"code": 1, "data": user.username, "email": user.email})


@api.route('/user/session', methods=["GET"])
def check_login():
    """检查登陆状态"""
    email = session.get("email")

    if email is None:
        return jsonify({"code": 0})
    else:
        if email.find("@") != -1:
            user = User.query.filter_by(email=email).first()
            return jsonify({"code": 1, "data": user.username, "email": user.email})
        else:
            return jsonify({"code": 0})


@api.route('/user/logout', methods=["GET"])
def logout():
    """退出"""
    session.clear()
    return jsonify({"code": 1, "data": "退出成功"})
