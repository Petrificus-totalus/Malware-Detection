from . import api
from malware import db
from datetime import datetime, timedelta
from malware.models import User, File, UserFile
from flask import request, jsonify, current_app, session
from sqlalchemy.exc import IntegrityError
from werkzeug.security import generate_password_hash, check_password_hash


@api.route('/alluser', methods=["POST"])
def alluser():
    """获取所有用户列表"""
    pagenum = request.form.get("pagenum")
    pagesize = request.form.get("pagesize")
    user = User.query.filter_by().all()
    total = len(user)
    userList = []
    for u in user:
        userList.append({
            "email": u.email,
            "username": u.username,
            "password": u.password,
            "create_time": u.create_time
        })
    end = int(pagesize)*int(pagenum)
    start = end-int(pagesize)
    if end > total:
        end = total
    userlist = []
    userlist = userList[start:end]

    return jsonify({"userlist": userlist, "total": total})



@api.route('/deluser/<email>', methods=["GET"])
def deluser(email):
    user = User.query.filter_by(email=email).first()
    db.session.delete(user)
    db.session.commit()
    return jsonify({"status":"ok"})


@api.route('/sizeChart', methods=["GET"])
def sizeChart():
    datas = [{"value": 0, "name": "<1KB"},
             {"value": 0, "name": "1KB-500KB"},
             {"value": 0, "name": "500KB-1MB"},
             {"value": 0, "name": "1MB-500MB"},
             {"value": 0, "name": "500MB-1GB"},
             {"value": 0, "name": ">1GB"},
             ]
    fs = File.query.filter_by().all()
    for f in fs:
        Bytes = f.filesize
        if Bytes < 1000:
            datas[0]["value"] += 1
        elif Bytes < 500000:
            datas[1]["value"] += 1
        elif Bytes < 1000000:
            datas[2]["value"] += 1
        elif Bytes < 500000000:
            datas[3]["value"] += 1
        elif Bytes < 1000000000:
            datas[4]["value"] += 1
        else:
            datas[5]["value"] += 1

    return jsonify({"datas": datas})


@api.route('/uploadNumChart', methods=["POST"])
def uploadNumChart():

    time = request.form.get("time")
    start = request.form.get("start")
    end = request.form.get("end")

    f = File.query.filter_by().all()
    datas = []
    arg = {"days": 1}
    if time == "周":
        arg = {"weeks": 1}
    elif time == "月":
        arg = {"weeks": 4}

    for a in f:
        ts = a.create_time.timestamp() * 1000
        if int(ts) >= int(start) and ts <= int(end):
            datas.append(a)

    t1 = (datetime.utcfromtimestamp(
        int(end)/1000) - timedelta(**arg)).timestamp()
    t2 = int(end)/1000
    dataList = []

    i = 0
    while t1 >= int(start)/1000:
        dataList.append({
            "time": t1*1000,
            "num": 0
        })
        for a in datas:
            ts = a.create_time.timestamp()
            if int(ts) >= int(t1) and ts <= int(t2):
                dataList[i]["num"] += 1

        t1 = (datetime.utcfromtimestamp(
            t1) - timedelta(**arg)).timestamp()
        t2 = (datetime.utcfromtimestamp(
            t2) - timedelta(**arg)).timestamp()
        i += 1

    return jsonify({"data": dataList})


@api.route('/registerNumChart', methods=["POST"])
def registerNumChart():

    time = request.form.get("time")
    start = request.form.get("start")
    end = request.form.get("end")
    registeruser = User.query.filter(User.username != "Unknown").all()
    user = User.query.filter_by(username="Unknown").all()

    regdatas = []
    notregdatas = []
    arg = {"days": 1}
    if time == "周":
        arg = {"weeks": 1}
    elif time == "月":
        arg = {"weeks": 4}

    for a in registeruser:
        ts = a.create_time.timestamp() * 1000
        if int(ts) >= int(start) and ts <= int(end):
            regdatas.append(a)

    for a in user:
        ts = a.create_time.timestamp() * 1000
        if int(ts) >= int(start) and ts <= int(end):
            notregdatas.append(a)

    t1 = (datetime.utcfromtimestamp(
        int(end)/1000) - timedelta(**arg)).timestamp()
    t2 = int(end)/1000
    dataList = []

    i = 0
    while t1 >= int(start)/1000:
        dataList.append({
            "time": t1*1000,
            "regnum": 0,
            "notregnum": 0
        })
        for a in regdatas:
            ts = a.create_time.timestamp()
            if int(ts) >= int(t1) and ts <= int(t2):
                dataList[i]["regnum"] += 1

        for a in notregdatas:
            ts = a.create_time.timestamp()
            if int(ts) >= int(t1) and ts <= int(t2):
                dataList[i]["notregnum"] += 1

        t1 = (datetime.utcfromtimestamp(
            t1) - timedelta(**arg)).timestamp()
        t2 = (datetime.utcfromtimestamp(
            t2) - timedelta(**arg)).timestamp()
        i += 1

    return jsonify({"data": dataList})
    # return "i"


@api.route('/avgtime', methods=["GET"])
def avgtime():

    datas = [{"pe": 0, "check": 0, "totalSize": 0, "name": "<1KB"},
             {"pe": 0, "check": 0, "totalSize": 0, "name": "1KB-500KB"},
             {"pe": 0, "check": 0, "totalSize": 0, "name": "500KB-1MB"},
             {"pe": 0, "check": 0, "totalSize": 0, "name": "1MB-500MB"},
             {"pe": 0, "check": 0, "totalSize": 0, "name": "500MB-1GB"},
             {"pe": 0, "check": 0, "totalSize": 0, "name": ">1GB"},
             ]
    fs = UserFile.query.filter(
        UserFile.pe_time != -1, UserFile.check_time != -1).all()
    for a in fs:
        f = File.query.filter_by(md5=a.md5).first()
        Bytes = f.filesize
        pe = a.pe_time
        check = a.check_time

        i = 5
        if Bytes < 1000:
            i = 0
        elif Bytes < 500000:
            i = 1
        elif Bytes < 1000000:
            i = 2
        elif Bytes < 500000000:
            i = 3
        elif Bytes < 1000000000:
            i = 4

        datas[i]["totalSize"] += Bytes
        datas[i]["pe"] += pe
        datas[i]["check"] += check

        dataList = []
        for a in datas:
            if a["totalSize"] > 0:
                dataList.append({
                    "name": a["name"],
                    "pe":  a["totalSize"]/1000/a["pe"]/1000/100,
                    "check":  a["totalSize"]/1000/a["check"]/100,
                })
            else:
                dataList.append(a)

    return jsonify({"data": dataList})
