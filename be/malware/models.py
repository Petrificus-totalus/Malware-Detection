from datetime import datetime
from . import db
from werkzeug.security import generate_password_hash, check_password_hash


class BaseModel(object):
    """模型基类，为每个模型补充创建时间和更新时间"""
    create_time = db.Column(db.DateTime, default=datetime.now)
    update_time = db.Column(
        db.DateTime, default=datetime.now, onupdate=datetime.now)


class User(BaseModel, db.Model):
    """用户类"""
    # 表的名字:
    __tablename__ = 'user'

    # 表的结构:
    username = db.Column(db.String(255))
    password = db.Column(db.String(255))
    email = db.Column(db.String(255), primary_key=True)

    # 会把函数变成一个属性，函数的返回值作为属性的值
    @property
    def pwd(self):
        raise AttributeError("这个属性只能写入")   # 不允许 user.pwd 调用

    # 设置属性的值
    @pwd.setter
    def pwd(self, value):
        self.password = generate_password_hash(value)

    def check_password(self, password):
        """检验密码"""
        return check_password_hash(self.password, password)


class File(BaseModel, db.Model):
    """文件类"""
    # 表的名字:
    __tablename__ = 'file'

    filename = db.Column(db.String(255))
    filesize = db.Column(db.Integer)
    subsystem = db.Column(db.String(20))
    magic = db.Column(db.String(15))
    ma_i_v = db.Column(db.Integer)
    mi_i_v = db.Column(db.Integer)
    ma_l_v = db.Column(db.Integer)
    mi_l_v = db.Column(db.Integer)
    ma_os_v = db.Column(db.Integer)
    mi_os_v = db.Column(db.Integer)
    ma_s_v = db.Column(db.Integer)
    mi_s_v = db.Column(db.Integer)
    sizeof_c = db.Column(db.Integer)
    sizeof_h = db.Column(db.Integer)
    sizeof_hc = db.Column(db.Integer)
    timestamp = db.Column(db.Integer)
    machine = db.Column(db.String(15))

    dllcha = db.relationship("DllCha", uselist=True,
                             backref=db.backref('dllcha'), lazy="subquery")
    ch = db.relationship("Ch", uselist=True,
                         backref=db.backref('ch'), lazy="subquery")

    kernel = db.relationship("Kernel", uselist=True,
                             backref=db.backref('kernel'), lazy="subquery")
    user32 = db.relationship("Usersaner", uselist=True,
                             backref=db.backref('user32'), lazy="subquery")

    msvcrt = db.relationship("Msvcrt", uselist=True,
                             backref=db.backref('msvcrt'), lazy="subquery")
    snmpapi = db.relationship("Snmpapi", uselist=True,
                              backref=db.backref('snmpapi'), lazy="subquery")
    wS2_32 = db.relationship("Ws", uselist=True,
                             backref=db.backref('wS2_32'), lazy="subquery")
    gDI32 = db.relationship("Gdi", uselist=True,
                            backref=db.backref('gDI32'), lazy="subquery")

    iphlpapi = db.relationship("Iphlpapi", uselist=True,
                               backref=db.backref('iphlpapi'), lazy="subquery")

    shell32 = db.relationship("Shell", uselist=True,
                              backref=db.backref('shell32'), lazy="subquery")

    comctl32 = db.relationship("Comctl", uselist=True,
                               backref=db.backref('comctl32'), lazy="subquery")

    ole32 = db.relationship("Ole", uselist=True,
                            backref=db.backref('ole32'), lazy="subquery")

    sections = db.relationship("Sections", uselist=True,
                               backref=db.backref('sections'), lazy="subquery")

    md5 = db.Column(db.String(255), primary_key=True)
    status = db.Column(db.Enum("safe", "unsafe"), nullable=False)
    # 上传了这个文件的人
    user = db.Column(db.String(255))
    count = db.Column(db.Integer, default=0)
    users = db.relationship('User', uselist=True, secondary="user_file",
                            backref=db.backref('files'), lazy="subquery")


class UserFile(BaseModel, db.Model):
    """映射类"""
    # 表的名字:
    __tablename__ = 'user_file'

    # 表的结构:
    id = db.Column(db.Integer, primary_key=True)

    md5 = db.Column(db.String(255), db.ForeignKey(
        "file.md5"))
    email = db.Column(db.String(255), db.ForeignKey(
        "user.email"))
    count = db.Column(db.Integer)
    uploadorsearch = db.Column(db.String(10))  # 上传还是搜索

    exist = db.Column(db.String(10), default="null")
    pe_time = db.Column(db.Float)
    check_time = db.Column(db.Float)


class Kernel(BaseModel, db.Model):
    """映射类"""
    # 表的名字:
    __tablename__ = 'kernel'

    # 表的结构:
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(255))

    md5 = db.Column(db.String(50), db.ForeignKey(
        "file.md5"))


class DllCha(BaseModel, db.Model):
    """映射类"""
    # 表的名字:
    __tablename__ = 'dll_characteristics'

    # 表的结构:
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(255))

    md5 = db.Column(db.String(50), db.ForeignKey(
        "file.md5"))


class Ch(BaseModel, db.Model):
    """映射类"""
    # 表的名字:
    __tablename__ = 'characteristics'

    # 表的结构:
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(255))

    md5 = db.Column(db.String(50), db.ForeignKey(
        "file.md5"))


class Usersaner(BaseModel, db.Model):
    """映射类"""
    # 表的名字:
    __tablename__ = 'usersaner'

    # 表的结构:
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(255))

    md5 = db.Column(db.String(50), db.ForeignKey(
        "file.md5"))


class Ole(BaseModel, db.Model):
    """映射类"""
    # 表的名字:
    __tablename__ = 'ole'

    # 表的结构:
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(255))

    md5 = db.Column(db.String(50), db.ForeignKey(
        "file.md5"))


class Msvcrt(BaseModel, db.Model):
    """映射类"""
    # 表的名字:
    __tablename__ = 'msvcrt'

    # 表的结构:
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(255))

    md5 = db.Column(db.String(50), db.ForeignKey(
        "file.md5"))


class Snmpapi(BaseModel, db.Model):
    """映射类"""
    # 表的名字:
    __tablename__ = 'snmpapi'

    # 表的结构:
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(255))

    md5 = db.Column(db.String(50), db.ForeignKey(
        "file.md5"))


class Ws(BaseModel, db.Model):
    """映射类"""
    # 表的名字:
    __tablename__ = 'ws'

    # 表的结构:
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(255))

    md5 = db.Column(db.String(50), db.ForeignKey(
        "file.md5"))


class Gdi(BaseModel, db.Model):
    """映射类"""
    # 表的名字:
    __tablename__ = 'gdi'

    # 表的结构:
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(255))

    md5 = db.Column(db.String(50), db.ForeignKey(
        "file.md5"))


class Shell(BaseModel, db.Model):
    """映射类"""
    # 表的名字:
    __tablename__ = 'shell'

    # 表的结构:
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(255))

    md5 = db.Column(db.String(50), db.ForeignKey(
        "file.md5"))


class Iphlpapi(BaseModel, db.Model):
    """映射类"""
    # 表的名字:
    __tablename__ = 'iphlpapi'

    # 表的结构:
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(255))

    md5 = db.Column(db.String(50), db.ForeignKey(
        "file.md5"))


class Comctl(BaseModel, db.Model):
    """映射类"""
    # 表的名字:
    __tablename__ = 'comctl'

    # 表的结构:
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(255))

    md5 = db.Column(db.String(50), db.ForeignKey(
        "file.md5"))


class Sections(BaseModel, db.Model):
    """映射类"""
    # 表的名字:
    __tablename__ = 'sections'

    # 表的结构:
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(10))
    size = db.Column(db.Integer)
    vsize = db.Column(db.Integer)

    md5 = db.Column(db.String(50), db.ForeignKey(
        "file.md5"))
